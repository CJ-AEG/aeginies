import streamlit as st
import pandas as pd
import plotly.express as px
import requests
import io
from PIL import Image
import base64

# ‚úÖ Configuration de la page
st.set_page_config(layout="wide")

# ‚úÖ Charger le logo
logo = Image.open("logo_aeg.jpg")

# ‚úÖ Convertir en base64 pour le rendre cliquable
with open("logo_aeg.jpg", "rb") as img_file:
    logo_base64 = base64.b64encode(img_file.read()).decode()

# ‚úÖ Affichage du logo en tant que bouton cliquable
st.sidebar.markdown(
    f"""
    <a href="/" target="_self">
        <img src="data:image/png;base64,{logo_base64}" style="width: 100%; height: auto;">
    </a>
    """,
    unsafe_allow_html=True
)


# ‚úÖ Charger automatiquement le fichier depuis GitHub
@st.cache_data
def load_data_from_repo():
    url = 'https://raw.githubusercontent.com/CJ-AEG/aeginies/main/base_inies_complete.xlsx'
    try:
        response = requests.get(url)
        if response.status_code == 200:
            file = io.BytesIO(response.content)
            df = pd.read_excel(file, sheet_name="Sheet1", engine='openpyxl')
            return df
        else:
            st.error(f"‚ö†Ô∏è Erreur lors du chargement du fichier : {response.status_code}")
            return pd.DataFrame()
    except Exception as e:
        st.error(f"‚ö†Ô∏è Erreur lors du chargement : {e}")
        return pd.DataFrame()

# ‚úÖ Charger les donn√©es
df = load_data_from_repo()

# ‚úÖ V√©rifier que la base de donn√©es est disponible
if df.empty:
    st.warning("‚ö†Ô∏è Base de donn√©es vide !")
    st.stop()

# ‚úÖ Cr√©er une colonne combin√©e pour recherche par nom ou ID
df['Produit (ID)'] = df['Nom du produit'] + " (ID: " + df['ID INIES'].astype(str) + ")"

# ‚úÖ Titre de la page
st.title("üîé Comparaison de produits")

# ‚úÖ Colonnes c√¥te √† c√¥te pour la s√©lection
col1, col2 = st.columns(2)

# ‚úÖ S√©lection du premier produit (cl√© unique)
with col1:
    product_1 = st.selectbox(
        "üõí S√©lectionner le premier produit :", 
        df['Produit (ID)'].unique(),
        key="product_1"
    )

# ‚úÖ S√©lection du second produit (cl√© unique)
with col2:
    product_2 = st.selectbox(
        "üõí S√©lectionner le second produit :", 
        df['Produit (ID)'].unique(),
        key="product_2"
    )

# ‚úÖ V√©rification que les produits sont diff√©rents
if product_1 == product_2:
    st.warning("‚ö†Ô∏è Les produits doivent √™tre diff√©rents pour lancer la comparaison.")
    st.stop()

# ‚úÖ Filtrer les deux produits s√©lectionn√©s par nom du produit
product_1_name = product_1.split(" (ID: ")[0]
product_2_name = product_2.split(" (ID: ")[0]

filtered_df = df[df['Nom du produit'].isin([product_1_name, product_2_name])].copy()

# ‚úÖ Nettoyage des colonnes (forcer en float)
filtered_df['Impact CO‚ÇÇ (kg)'] = pd.to_numeric(filtered_df['Impact CO‚ÇÇ (kg)'], errors='coerce').fillna(0)
filtered_df['D-B√©n√©fices'] = pd.to_numeric(filtered_df['D-B√©n√©fices'], errors='coerce').fillna(0)
filtered_df['Dur√©e de Vie'] = pd.to_numeric(
    filtered_df['Dur√©e de Vie'].str.replace('ans', '', regex=True).str.strip(),
    errors='coerce'
).fillna(50)

# ‚úÖ Ajouter l'impact total normalis√©
filtered_df['Impact total normalis√©'] = (
    (filtered_df['Impact CO‚ÇÇ (kg)'] + filtered_df['D-B√©n√©fices']) * (50 / filtered_df['Dur√©e de Vie'])
)

# ‚úÖ V√©rification des colonnes disponibles
available_columns = ['Type de D√©claration', 'Impact CO‚ÇÇ (kg)', 'D-B√©n√©fices', 'Impact total normalis√©']
if 'Z-Score' in filtered_df.columns:
    available_columns.append('Z-Score')
if 'Cat√©gorie' in filtered_df.columns:
    available_columns.append('Cat√©gorie')

# ‚úÖ Affichage du tableau comparatif sous forme de colonnes
st.write("### üìä Tableau comparatif")
st.dataframe(
    filtered_df.set_index('Nom du produit')[available_columns].transpose()
)

# ‚úÖ Cr√©er un DataFrame pour le graphique group√©
comparison_data = pd.DataFrame({
    'Nom du produit': [product_1_name, product_2_name],
    'Impact CO‚ÇÇ (kg)': filtered_df['Impact CO‚ÇÇ (kg)'].values,
    'D-B√©n√©fices': filtered_df['D-B√©n√©fices'].values,
    'Impact total normalis√©': filtered_df['Impact total normalis√©'].values
})

# ‚úÖ Transformer les donn√©es pour un graphique group√©
comparison_data_melted = comparison_data.melt(
    id_vars='Nom du produit', 
    value_vars=['Impact CO‚ÇÇ (kg)', 'D-B√©n√©fices', 'Impact total normalis√©'],
    var_name='Variable',
    value_name='Valeur'
)

# ‚úÖ Cr√©er le graphique √† barres group√©
fig = px.bar(
    comparison_data_melted,
    x='Variable',                   # Les variables en abscisse
    y='Valeur',
    color='Nom du produit',         # Les produits en couleur
    barmode='group',                # Mode group√©
    title="üîé Comparaison des produits"
)

# ‚úÖ Personnalisation du style du graphique
fig.update_layout(
    xaxis_title="Type d'impact",
    yaxis_title="Valeur",
    legend_title="Produit",
    bargap=0.2
)

# ‚úÖ Afficher le graphique
st.plotly_chart(fig)


# ‚úÖ Bouton de retour √† l'accueil
if st.button("üè† Retour √† l'accueil"):
    st.switch_page("appworks.py")

